import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ai.MiniMax object$rac): (execution( * ai.MiniMax..*+.*(..))
          || execution(ai.MiniMax..*+.new(..))
          || execution( * ai.MiniMax+.*(..))
          || execution(ai.MiniMax+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ai.MiniMax..*+.*(..))
          || execution(ai.MiniMax..*+.new(..))
          || execution( * ai.MiniMax+.*(..))
          || execution(ai.MiniMax+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ai.MiniMaxAlphaBeta object$rac): (execution( * ai.MiniMaxAlphaBeta..*+.*(..))
          || execution(ai.MiniMaxAlphaBeta..*+.new(..))
          || execution( * ai.MiniMaxAlphaBeta+.*(..))
          || execution(ai.MiniMaxAlphaBeta+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ai.MiniMaxAlphaBeta..*+.*(..))
          || execution(ai.MiniMaxAlphaBeta..*+.new(..))
          || execution( * ai.MiniMaxAlphaBeta+.*(..))
          || execution(ai.MiniMaxAlphaBeta+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ai.MiniMaxCombined object$rac): (execution( * ai.MiniMaxCombined..*+.*(..))
          || execution(ai.MiniMaxCombined..*+.new(..))
          || execution( * ai.MiniMaxCombined+.*(..))
          || execution(ai.MiniMaxCombined+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ai.MiniMaxCombined..*+.*(..))
          || execution(ai.MiniMaxCombined..*+.new(..))
          || execution( * ai.MiniMaxCombined+.*(..))
          || execution(ai.MiniMaxCombined+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ai.MiniMaxImproved object$rac): (execution( * ai.MiniMaxImproved..*+.*(..))
          || execution(ai.MiniMaxImproved..*+.new(..))
          || execution( * ai.MiniMaxImproved+.*(..))
          || execution(ai.MiniMaxImproved+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ai.MiniMaxImproved..*+.*(..))
          || execution(ai.MiniMaxImproved..*+.new(..))
          || execution( * ai.MiniMaxImproved+.*(..))
          || execution(ai.MiniMaxImproved+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final game.Board object$rac): (execution( * game.Board..*+.*(..))
          || execution(game.Board..*+.new(..))
          || execution( * game.Board+.*(..))
          || execution(game.Board+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * game.Board..*+.*(..))
          || execution(game.Board..*+.new(..))
          || execution( * game.Board+.*(..))
          || execution(game.Board+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Board$8c64a3bc_e9dd_4680_845f_5e5b7660fb62{
  before(): (execution( * game.Board..*+.*(..))
          || execution(game.Board..*+.new(..))
          || execution( * game.Board+.*(..))
          || execution(game.Board+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final game.Mark object$rac): (execution( * game.Mark..*+.*(..))
          || execution(game.Mark..*+.new(..))
          || execution( * game.Mark+.*(..))
          || execution(game.Mark+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * game.Mark..*+.*(..))
          || execution(game.Mark..*+.new(..))
          || execution( * game.Mark+.*(..))
          || execution(game.Mark+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Mark$426952a6_b9de_4df8_bb35_577d52710554{
  before(): (execution( * game.Mark..*+.*(..))
          || execution(game.Mark..*+.new(..))
          || execution( * game.Mark+.*(..))
          || execution(game.Mark+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final game.TicTacToe object$rac): (execution( * game.TicTacToe..*+.*(..))
          || execution(game.TicTacToe..*+.new(..))
          || execution( * game.TicTacToe+.*(..))
          || execution(game.TicTacToe+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * game.TicTacToe..*+.*(..))
          || execution(game.TicTacToe..*+.new(..))
          || execution( * game.TicTacToe+.*(..))
          || execution(game.TicTacToe+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}